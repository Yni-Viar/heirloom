name: Heirloom
on: [push, workflow_dispatch]

jobs:
  download:
    name: Download deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dependencies
        shell: bash
        run: |
          chmod +x src/install-deps.sh
          DOWNLOAD_ONLY=1 USE_MIRROR=1 src/install-deps.sh

      - name: Upload dependencies
        uses: actions/upload-artifact@v4
        with:
          name: deps
          path: src/downloads/

  build:
    name: Build
    runs-on: windows-latest
    needs: download
    strategy:
      matrix:
        platform: [ARM64, x64]
        project: [winfile, progman]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: deps
          path: src/downloads/

      - name: Install dependencies
        shell: bash
        run: |
          ls -lR
          src/install-deps.sh

      - name: Build
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $global:ErrorActionPreference = "Stop"
          $global:ProgressPreference = "SilentlyContinue"

          # vswhere is slow, check this hardcoded path first.
          $msbuild = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
          if (-not (Test-Path $msbuild))
          {
            Write-Host "Checking for vswhere.exe"
            $vswhere = Join-Path "$env:ProgramFiles (x86)" "Microsoft Visual Studio\Installer\vswhere.exe"
            if (-not (Test-Path $vswhere))
            {
              throw "Could not find vswhere.exe"
            }
            Write-Host "vswhere: $vswhere"

            Write-Host "Checking for msbuild.exe"
            $msbuild = & $vswhere -latest -requires Microsoft.Component.MSBuild -find "MSBuild\**\Bin\MSBuild.exe" | Select-Object -First 1
            if (-not (Test-Path $msbuild))
            {
              throw "Could not find msbuild.exe"
            }
          }
          Write-Host "msbuild: $msbuild"

          Push-Location src

          Write-Host "${{ matrix.project }}: Building for ${{ matrix.platform }}"
          & $msbuild ${{ matrix.project }}.sln /p:Configuration=Release /p:Platform=${{ matrix.platform }} /verbosity:quiet /nologo
          if ($LASTEXITCODE -ne 0)
          {
            throw "${{ matrix.project }}: Failed to build for ${{ matrix.platform }}"
          }

          Pop-Location

          Write-Host "Creating artifacts directory"
          New-Item -ItemType Directory -Path . -Name stage
          New-Item -ItemType Directory -Path stage -Name ${{ matrix.platform }}

          Copy-Item src\${{ matrix.project }}\LICENSE stage\${{ matrix.platform }}\LICENSE-${{ matrix.project }}.txt
          Copy-Item src\${{ matrix.platform }}\Release\${{ matrix.project }}.exe stage\${{ matrix.platform }}\${{ matrix.project }}.exe

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-${{ matrix.platform }}
          path: stage/${{ matrix.platform }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Delete dependencies
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: deps
